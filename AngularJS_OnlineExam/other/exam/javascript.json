[{
    "test": {
        "Id": 3,
        "name": "Design Patterns",
        "description": "Design Patterns Quiz including solid principles."
    },
    "Questions": [
    {
        "Id": 1,
        "Que": "In SOLID principle, O stands for:", 
        "Options": [
            {"Opt": "Objects and Variables", "Ans": false },
            {"Opt": "Open-Closed Principle", "Ans": true },
            {"Opt":"Object Oriented Programming", "Ans": false },
            {"Opt": "OutOfMemory Exception", "Ans": false }]  
	          
    },
    {
        "Id": 2,
        "Que": "Which pattern defines an interface for creating an object, but let the subclasses decide which class to instantiate. It let the instantiation differ to subclasses.", 
        
        "Options": [
            {"Opt": "Factory Method", "Ans": true },
            {"Opt": "Abstract Factory", "Ans": false },
            {"Opt": "Builder", "Ans": false },
            {"Opt": "Prototype", "Ans": false }]
    },
    {
        "Id": 3,
        "Que": "In SOLID principle, O stands for:", 
        "Options": [
            {"Opt": "Objects and Variables", "Ans": false },
            {"Opt": "Open-Closed Principle", "Ans": true },
            {"Opt":"Object Oriented Programming", "Ans": false },
            {"Opt": "OutOfMemory Exception", "Ans": false }]  
	          
    },
    {
        "Id": 4,
        "Que": "Which pattern defines an interface for creating an object, but let the subclasses decide which class to instantiate. It let the instantiation differ to subclasses.", 
        
        "Options": [
            {"Opt": "Factory Method", "Ans": true },
            {"Opt": "Abstract Factory", "Ans": false },
            {"Opt": "Builder", "Ans": false },
            {"Opt": "Prototype", "Ans": false }]
    },
    {
        "Id": 5,
        "Que": "In SOLID principle, O stands for:", 
        "Options": [
            {"Opt": "Objects and Variables", "Ans": false },
            {"Opt": "Open-Closed Principle", "Ans": true },
            {"Opt":"Object Oriented Programming", "Ans": false },
            {"Opt": "OutOfMemory Exception", "Ans": false }]  
	          
    },
    {
        "Id": 6,
        "Que": "Which pattern defines an interface for creating an object, but let the subclasses decide which class to instantiate. It let the instantiation differ to subclasses.", 
        
        "Options": [
            {"Opt": "Factory Method", "Ans": true },
            {"Opt": "Abstract Factory", "Ans": false },
            {"Opt": "Builder", "Ans": false },
            {"Opt": "Prototype", "Ans": false }]
    },
    {
        "Id": 7,
        "Que": "In SOLID principle, O stands for:", 
        "Options": [
            {"Opt": "Objects and Variables", "Ans": false },
            {"Opt": "Open-Closed Principle", "Ans": true },
            {"Opt":"Object Oriented Programming", "Ans": false },
            {"Opt": "OutOfMemory Exception", "Ans": false }]  
	          
    },
    {
        "Id": 8,
        "Que": "Which pattern defines an interface for creating an object, but let the subclasses decide which class to instantiate. It let the instantiation differ to subclasses.", 
        
        "Options": [
            {"Opt": "Factory Method", "Ans": true },
            {"Opt": "Abstract Factory", "Ans": false },
            {"Opt": "Builder", "Ans": false },
            {"Opt": "Prototype", "Ans": false }]
    },
    {
        "Id": 9,
        "Que": "In SOLID principle, O stands for:", 
        "Options": [
            {"Opt": "Objects and Variables", "Ans": false },
            {"Opt": "Open-Closed Principle", "Ans": true },
            {"Opt":"Object Oriented Programming", "Ans": false },
            {"Opt": "OutOfMemory Exception", "Ans": false }]  
	          
    },
    {
        "Id": 10,
        "Que": "Which pattern defines an interface for creating an object, but let the subclasses decide which class to instantiate. It let the instantiation differ to subclasses.", 
        
        "Options": [
            {"Opt": "Factory Method", "Ans": true },
            {"Opt": "Abstract Factory", "Ans": false },
            {"Opt": "Builder", "Ans": false },
            {"Opt": "Prototype", "Ans": false }]
    }
    ]
}]